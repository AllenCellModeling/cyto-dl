_target_: serotiny.datamodules.dataframe.DataframeDatamodule

path: 
cache_dir:

num_workers: 4
batch_size: 8
pin_memory: True
persistent_workers: False

columns: 
  - ${source_col}
  - ${target_col} 

transforms:
  train:
    _target_: monai.transforms.Compose
    transforms: 
      - _target_: monai.transforms.LoadImaged
        keys: ${datamodule.columns}
        reader:
        - _target_: serotiny.image.io.MonaiBioReader
          dimension_order_out: 'CZYX'

      - _target_: monai.transforms.ToTensord
        keys: ${datamodule.columns}
        ## NOTE: target_col should not be normalized if it is a binary output
      - _target_: monai.transforms.NormalizeIntensityd
        keys: 
          - ${source_col}
          # - ${target_col} 
        dtype: float16
      - _target_: monai.transforms.ThresholdIntensityd
        keys:
          - ${target_col}
        above: False
        threshold: 0.1
        cval: 1

      - _target_: serotiny.image.transforms.RandomMultiScaleCropd
        keys: ${datamodule.columns}
        patch_shape: ${model.patch_shape}
        patch_per_image: 1
        scales_dict:
          1:  ${datamodule.columns}
        # selection_fn:
        #   _target_: serotiny.image.transforms.BrightSampler
        #   key: ${target_col}
        #   threshold: -0.38
        #   base_prob: 0.15

      - _target_: monai.transforms.RandHistogramShiftd
        prob: 0.3
        keys: ${source_col}
        num_control_points: [90, 500]

      - _target_: monai.transforms.RandStdShiftIntensityd
        prob: 0.3
        keys: ${source_col}
        factors: 0.1 

      - _target_: monai.transforms.RandAdjustContrastd
        prob: 0.3
        keys: ${source_col}
        gamma: [0.9, 1.1]

      - _target_: monai.transforms.RandFlipd
        keys: ${datamodule.columns}
        prob: 0.5
        spatial_axis: [1]
      - _target_: monai.transforms.RandFlipd
        keys: ${datamodule.columns}
        prob: 0.5
        spatial_axis: [2]

      - _target_: monai.transforms.RandRotate90d
        keys: ${datamodule.columns}
        prob: 0.5
        spatial_axes: [1, 2]

  test:
    _target_: monai.transforms.Compose
    transforms: 
      - _target_: monai.transforms.LoadImaged
        keys:   
          - ${source_col}
        reader:
        - _target_: serotiny.image.io.MonaiBioReader
          dimension_order_out: 'CZYX'
      - _target_: monai.transforms.ToTensord
        keys:   
          - ${source_col}
      - _target_: monai.transforms.NormalizeIntensityd
        keys:   
          - ${source_col}

  valid:
    _target_: monai.transforms.Compose
    transforms: 
      - _target_: monai.transforms.LoadImaged
        keys: ${datamodule.columns}
        reader:
        - _target_: serotiny.image.io.MonaiBioReader
          dimension_order_out: 'CZYX'
      - _target_: monai.transforms.ToTensord
        keys: ${datamodule.columns}  
        ## NOTE: target_col should not be normalized if it is a binary output
      - _target_: monai.transforms.NormalizeIntensityd
        keys:   
          - ${source_col}
          # - ${target_col}

      - _target_: monai.transforms.ThresholdIntensityd
        keys:
          - ${target_col}
        above: False
        threshold: 0.1
        cval: 1

      - _target_: serotiny.image.transforms.RandomMultiScaleCropd
        keys: ${datamodule.columns}
        patch_shape:  ${model.patch_shape}
        patch_per_image: 6
        scales_dict:
          1:  ${datamodule.columns}

