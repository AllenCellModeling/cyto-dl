_target_: aics_im2im.models.MultiTaskIm2Im

save_images_every_n_epochs: 10
x_key: raw
patch_shape: [48, 512, 512]

size: 2class_lamin_aug
backbone:
  _target_: monai.networks.nets.DynUNet
  spatial_dims: 3
  in_channels: 1
  out_channels: 32
  strides: [[1, 1, 1], [1, 2, 2], [1, 1, 1], [2, 2, 2], [1, 1, 1]]
  kernel_size: [[3, 3, 3], [3, 3, 3], [3, 3, 3], [3, 3, 3], [3, 3, 3]]
  upsample_kernel_size:  [[1, 2, 2], [1, 1, 1], [2, 2, 2], [1, 1, 1]]
  filters: [32, 64, 128, 256, 512]
  dropout: 0.5
  res_block: True

tasks:
  seg:
    head:
      _target_: aics_im2im.networks.AuxHead
      resolution: lr
      in_channels: 32
      out_channels: 3
      dropout: 0.5
      final_act:
        _target_: torch.nn.Softmax
        dim: 1

    loss:
        _target_: monai.losses.GeneralizedDiceLoss

      # _target_: aics_im2im.utils.LossWrapper
      # loss_fn:
      #   _target_: monai.losses.GeneralizedDiceLoss
      # channel_weight: [1,1,1]
      # loss_scale: 1



optimizer: 
  _partial_: True
  _target_: torch.optim.Adam
  lr: 0.0001
  weight_decay: 0.01

lr_scheduler:
  _partial_: True
  _target_: torch.optim.lr_scheduler.ExponentialLR
  gamma: 0.995


postprocessing:
  input:
    raw:
      _target_: aics_im2im.utils.embedseg_utils.rescale
      _partial_: True
    seg:
      _target_: aics_im2im.utils.embedseg_utils.rescale
      _partial_: True
  prediction:
    seg:
      _target_: aics_im2im.utils.embedseg_utils.rescale
      _partial_: True


